'''
Given a sorted array of integers, find the number of occurrences of a given target value.
Your algorithmâ€™s runtime complexity must be in the order of O(log n).
If the target is not found in the array, return 0

**Example : **
Given [5, 7, 7, 8, 8, 10] and target value 8,
return 2.
'''
#################################################################################################################################
class Solution:
    # @param A : tuple of integers
    # @param B : integer
    # @return an integer
    def check(self,arr,x,start,end):
        mid=start+(end-start)//2
        if start<=end:
            if x==arr[mid]:
                sum=1
                i,j=mid-1,mid+1
                while i>=0 and arr[i]==x:
                    sum+=1
                    i-=1
                while j<=len(arr)-1 and arr[j]==x:
                    sum+=1
                    j+=1
                return sum
            elif arr[mid]<x:
                return self.check(arr,x,mid+1,end)
            elif arr[mid]>x:
                return self.check(arr,x,start,mid-1)
    def findCount(self, A, B):
        A=list(A)
        x=self.check(A,B,0,len(A)-1)
        if x is None:
            return 0
        else:
            return x
          ###Contribbuted by NobleBlack
